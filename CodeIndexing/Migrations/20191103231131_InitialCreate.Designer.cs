// <auto-generated />
using System;
using CodeIndexing.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CodeIndexing.Migrations
{
    [DbContext(typeof(IndexDataContext))]
    [Migration("20191103231131_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("CodeIndexing.Dto.ClassDto", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Namespace")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnderlyingType")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClassId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("CodeIndexing.Dto.MethodDto", b =>
                {
                    b.Property<int>("MethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BelongsToClassId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("MethodName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Namespace")
                        .HasColumnType("TEXT");

                    b.HasKey("MethodId");

                    b.HasIndex("BelongsToClassId");

                    b.ToTable("Methods");
                });

            modelBuilder.Entity("CodeIndexing.Dto.MethodRelationship", b =>
                {
                    b.Property<int>("CallingMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MethodBeingCalledId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CallingMethodId", "MethodBeingCalledId");

                    b.HasIndex("MethodBeingCalledId");

                    b.ToTable("MethodRelationship");
                });

            modelBuilder.Entity("CodeIndexing.Dto.ParameterDto", b =>
                {
                    b.Property<int>("ParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BelongsToMethodMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParameterName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParamterTypeClassId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParameterId");

                    b.HasIndex("BelongsToMethodMethodId");

                    b.HasIndex("ParamterTypeClassId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("CodeIndexing.Dto.MethodDto", b =>
                {
                    b.HasOne("CodeIndexing.Dto.ClassDto", "BelongsTo")
                        .WithMany()
                        .HasForeignKey("BelongsToClassId");
                });

            modelBuilder.Entity("CodeIndexing.Dto.MethodRelationship", b =>
                {
                    b.HasOne("CodeIndexing.Dto.MethodDto", "CallingMethod")
                        .WithMany("MethodsCalled")
                        .HasForeignKey("CallingMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeIndexing.Dto.MethodDto", "MethodBeingCalled")
                        .WithMany("CalledByMethods")
                        .HasForeignKey("MethodBeingCalledId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeIndexing.Dto.ParameterDto", b =>
                {
                    b.HasOne("CodeIndexing.Dto.MethodDto", "BelongsToMethod")
                        .WithMany("Parameters")
                        .HasForeignKey("BelongsToMethodMethodId");

                    b.HasOne("CodeIndexing.Dto.ClassDto", "ParamterType")
                        .WithMany()
                        .HasForeignKey("ParamterTypeClassId");
                });
#pragma warning restore 612, 618
        }
    }
}
